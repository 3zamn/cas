if (project.name =~ /cassandra/ && "CASSANDRA".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testCassandra(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.CassandraCategory"
        }
    }
}

if (project.name =~ /cosmos/ && "COSMOSDB".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testCosmosDb(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.CosmosDbCategory"
        }
    }
}

if (project.name =~ /radius/ && "RADIUS".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testRadius(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.RadiusCategory"
        }
    }
}

if (project.name =~ /couchbase/ && "COUCHBASE".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testCouchbase(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.CouchbaseCategory"
        }
    }

}

if (project.name =~ /couchdb/ && "COUCHDB".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testCouchDb(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.CouchDbCategory"
        }
    }

}

if (project.name =~ /jpa/ || project.name =~ /jdbc/) {
    if ("MYSQL".equalsIgnoreCase(rootProject.testCategoryType)) {
        task testMySQL(type: Test) {
            useJUnitPlatform {
                includeTags "org.apereo.cas.category.MySQLCategory"
            }
        }

    }

    if ("POSTGRES".equalsIgnoreCase(rootProject.testCategoryType)) {
        task testPostgres(type: Test) {
            useJUnitPlatform {
                includeTags "org.apereo.cas.category.PostgresCategory"
            }
        }
    }

    if ("MSSQLSERVER".equalsIgnoreCase(rootProject.testCategoryType)) {
        task testMsSqlServer(type: Test) {
            useJUnitPlatform {
                includeTags "org.apereo.cas.category.MsSqlServerCategory"
            }
        }
    }

    if ("MARIADB".equalsIgnoreCase(rootProject.testCategoryType)) {
        task testMariaDb(type: Test) {
            useJUnitPlatform {
                includeTags "org.apereo.cas.category.MariaDbCategory"
            }
        }
    }
}

if (project.name =~ /dynamodb/ && "DYNAMODB".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testDynamoDb(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.DynamoDbCategory"
        }
    }

}

if ("FILESYSTEM".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testFileSystem(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.FileSystemCategory"
        }
    }

}

if (project.name =~ /ignite/ && "IGNITE".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testIgnite(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.IgniteCategory"
        }
        def list = []
        list.add("--add-exports")
        list.add("java.base/jdk.internal.misc=ALL-UNNAMED")
        list.add("--add-exports")
        list.add("java.base/sun.nio.ch=ALL-UNNAMED")
        jvmArgs = list
    }

}

if (project.name =~ /influxdb/ && "INFLUXDB".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testInfluxDb(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.InfluxDbCategory"
        }
    }

}

if ("LDAP".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testLdap(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.LdapCategory"
        }
    }
}

if ("MAIL".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testMail(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.MailCategory"
        }
    }
}

if ("RESTFUL".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testRestful(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.RestfulApiCategory"
        }
    }
}

if (project.name =~ /memcached/ && "MEMCACHED".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testMemcached(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.MemcachedCategory"
        }
    }

}

if (project.name =~ /mongo/ && "MONGODB".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testMongoDb(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.MongoDbCategory"
        }
    }

}

if (project.name =~ /redis/ && "REDIS".equalsIgnoreCase(rootProject.testCategoryType)) {
    task testRedis(type: Test) {
        useJUnitPlatform {
            includeTags "org.apereo.cas.category.RedisCategory"
        }
    }
}

test {
    include "**/*Tests.*"
    useJUnitPlatform {
        setExcludeTags Set.of(
                "org.apereo.cas.category.CassandraCategory",
                "org.apereo.cas.category.CosmosDbCategory",
                "org.apereo.cas.category.CouchbaseCategory",
                "org.apereo.cas.category.DynamoDbCategory",
                "org.apereo.cas.category.FileSystemCategory",
                "org.apereo.cas.category.IgniteCategory",
                "org.apereo.cas.category.InfluxDbCategory",
                "org.apereo.cas.category.CouchDbCategory",
                "org.apereo.cas.category.LdapCategory",
                "org.apereo.cas.category.MailCategory",
                "org.apereo.cas.category.MariaDbCategory",
                "org.apereo.cas.category.MemcachedCategory",
                "org.apereo.cas.category.MongoDbCategory",
                "org.apereo.cas.category.MsSqlServerCategory",
                "org.apereo.cas.category.MySQLCategory",
                "org.apereo.cas.category.PostgresCategory",
                "org.apereo.cas.category.RedisCategory",
                "org.apereo.cas.category.RadiusCategory",
                "org.apereo.cas.category.RestfulApiCategory"
        )
    }
    onlyIf {
        "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType)
    }
}

tasks.withType(Test) {
    exclude "**/Abstract*.*", "**/Base*.*", "**/*Suite.*"
    enabled = !Boolean.getBoolean("skipTests")
    scanForTestClasses = false
    ignoreFailures = Boolean.getBoolean("ignoreTestFailures")
    maxParallelForks = 4
    failFast = true
    jvmArgs "-Xmx1024m"
    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events = ["FAILED", "STANDARD_OUT"]
        exceptionFormat = "full"
        showStandardStreams = Boolean.getBoolean("showStandardStreams")
        showExceptions = true
        showCauses = true
    }
}
